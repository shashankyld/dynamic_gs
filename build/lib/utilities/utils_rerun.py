# Functions to log different components of the SLAM system to rerun:

import rerun as rr

def log_camera(entity_path, world_T_cam_44, K_44):
    """Logs camera intrinsics and extrinsics to rerun."""

    assert world_T_cam_44.shape == (4, 4)
    assert K_44.shape == (4, 4)

    # Convert and log camera parameters
    Rot, trans = world_T_cam_44[:3, :3], world_T_cam_44[:3, 3]
    K_33 = K_44[:3, :3]

    rr.log(
        entity_path,
        rr.Pinhole(
            image_from_camera=K_33,
            width=K_33[0, 2] * 2,  # Assuming principal point is in the center
            height=K_33[1, 2] * 2,
        ),
    )

    rr.log(entity_path, rr.Transform3D(translation=trans, mat3x3=Rot))


def log_image(image):
    """Logs an image to rerun."""
    rr.log(f"image", rr.Image(image))


def log_local_map(frame_id, entity_path, points):  # Added 'points' parameter
    """Logs the local map to rerun."""
    # points = get_local_map(frame_id)  # Removed the call to get_local_map
    rr.log(f"{entity_path}/local_map", rr.Points3D(points))


def log_global_map(frame_id, entity_path, points):  # Added 'points' parameter
    """Logs the global map to rerun."""
    # points = get_global_map(frame_id)  # Removed the call to get_global_map
    rr.log(f"{entity_path}/global_map", rr.Points3D(points))


def log_key_frames(frame_id, entity_path, key_frames):  # Added 'key_frames' parameter
    """Logs the set of key frames to rerun."""
    # key_frames = get_key_frames(frame_id)  # Removed the call to get_key_frames
    for i, frame in enumerate(key_frames):
        # Assuming frame is a dictionary with "image" and "pose"
        image = frame["image"]
        world_T_cam_44 = frame["pose"]  # 4x4 transformation matrix
        K_44 = frame["K"]  # 4x4 intrinsic matrix
        frame_path = f"{entity_path}/key_frames/{i}"
        log_camera(frame_path, world_T_cam_44, K_44)
        log_image(frame_path, image)


def log_current_frame(frame_id, entity_path, image):  # Added 'image' parameter
    """Logs the current frame to rerun."""
    # image = get_current_frame(frame_id)  # Removed the call to get_current_frame
    rr.log(f"{entity_path}/current_frame", rr.Image(image))


def log_features(frame_id, entity_path, features):  # Added 'features' parameter
    """Logs features in the current frame."""
    # features = get_features(frame_id)  # Removed the call to get_features
    rr.log(f"{entity_path}/current_frame/features", rr.Points2D(features))


def log_dynamic_features(
    frame_id, entity_path, dynamic_features
):  # Added 'dynamic_features' parameter
    """Logs dynamic features in the current frame."""
    # dynamic_features = get_dynamic_features(frame_id)  # Removed the call to get_dynamic_features
    rr.log(
        f"{entity_path}/current_frame/dynamic_features",
        rr.Points2D(dynamic_features, color=(255, 0, 0)),
    )  # Visualize in red


def log_camera_path(frame_id, entity_path, camera_path):  # Added 'camera_path' parameter
    """Logs the camera path up to the current frame_id."""
    # camera_path = get_camera_path(frame_id)  # Removed the call to get_camera_path
    rr.log(f"{entity_path}/camera_path", rr.LineStrip3D(camera_path))


def log_sam_masks(frame_id, entity_path, masks):  # Added 'masks' parameter
    """Logs the semantic masks generated by SAM."""
    # masks = get_sam_masks(frame_id)  # Removed the call to get_sam_masks
    for i, mask in enumerate(masks):
        rr.log(f"{entity_path}/sam_masks/{i}", rr.SegmentationImage(mask))


def log_sam_prompts(frame_id, entity_path, prompts):  # Added 'prompts' parameter
    """Logs the prompts given to SAM."""
    # prompts = get_sam_prompts(frame_id)  # Removed the call to get_sam_prompts
    rr.log(
        f"{entity_path}/sam_prompts", rr.Points2D(prompts, color=(0, 0, 255))
    )  # Visualize in blue


def log_all(
    frame_id,
    entity_path="world",
    # Add parameters for all the data you want to log
    local_map_points=None,
    global_map_points=None,
    key_frames=None,
    current_frame_image=None,
    features=None,
    dynamic_features=None,
    camera_path=None,
    sam_masks=None,
    sam_prompts=None,
):
    """Logs all the components of the SLAM system to rerun."""

    rr.set_time_sequence("frame", frame_id)

    # Add toggle for each logging component as needed
    if local_map_points is not None:
        log_local_map(frame_id, entity_path, local_map_points)
    if global_map_points is not None:
        log_global_map(frame_id, entity_path, global_map_points)
    if key_frames is not None:
        log_key_frames(frame_id, entity_path, key_frames)
    if current_frame_image is not None:
        log_current_frame(frame_id, entity_path, current_frame_image)
    if features is not None:
        log_features(frame_id, entity_path, features)
    if dynamic_features is not None:
        log_dynamic_features(frame_id, entity_path, dynamic_features)
    if camera_path is not None:
        log_camera_path(frame_id, entity_path, camera_path)
    if sam_masks is not None:
        log_sam_masks(frame_id, entity_path, sam_masks)
    if sam_prompts is not None:
        log_sam_prompts(frame_id, entity_path, sam_prompts)